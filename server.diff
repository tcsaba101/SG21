diff --git a/server.cpp b/server.cpp
index bec66ce..4bd6599 100644
--- a/server.cpp
+++ b/server.cpp
@@ -23,7 +23,6 @@
 
 #include "OpenSprinkler.h"
 #include "program.h"
-#include "SensorGroup.h"
 
 // External variables defined in main ion file
 #if defined(ARDUINO)
@@ -49,8 +48,6 @@ extern BufferFiller bfill;
 extern char tmp_buffer[];
 extern OpenSprinkler os;
 extern ProgramData pd;
-extern EtherCard ether;
-extern SensorGroup sensors;	//SensorGroup object
 
 void schedule_all_stations(ulong curr_time);
 void turn_off_station(byte sid, ulong curr_time);
@@ -370,8 +367,6 @@ void server_json_stations_main()
   server_json_stations_attrib(PSTR("masop2"), ADDR_NVM_MAS_OP_2);
   server_json_stations_attrib(PSTR("stn_dis"), ADDR_NVM_STNDISABLE);
   server_json_stations_attrib(PSTR("stn_seq"), ADDR_NVM_STNSEQ);
-  server_json_stations_attrib(PSTR("stn_as1"), ADDR_NVM_SSENSOR_1);  // attach soil sensor1 status on station
-  server_json_stations_attrib(PSTR("stn_as2"), ADDR_NVM_SSENSOR_2);  // attach soil sensor2 status on station
 #if defined(ARDUINO)  // only output stn_spe if it's supported
   if (os.status.has_sd) {
     server_json_stations_attrib(PSTR("stn_spe"), ADDR_NVM_STNSPE);
@@ -450,8 +445,8 @@ void server_change_stations_attrib(char *p, char header, int addr)
  * m?: master operation bit field (? is board index, starting from 0)
  * i?: ignore rain bit field
  * n?: master2 operation bit field
- * d?: disable station bit field
- * q?: station sequetial bit field
+ * d?: disable sation bit field
+ * q?: station sequeitnal bit field
  * p?: station special flag bit field
  */
 byte server_change_stations(char *p)
@@ -472,14 +467,6 @@ byte server_change_stations(char *p)
   server_change_stations_attrib(p, 'n', ADDR_NVM_MAS_OP_2); // master2
   server_change_stations_attrib(p, 'd', ADDR_NVM_STNDISABLE); // disable
   server_change_stations_attrib(p, 'q', ADDR_NVM_STNSEQ); // sequential
-  
-  // test purpose:/cs sets Soil_sensor attach station values on the first 16 stations 
-  char tbuf3[2] = {5,0};   //soil sensor 1 attached to s0, s2, bx0101010101, bx1010101010
-    nvm_write_block(tbuf3, (void *)ADDR_NVM_SSENSOR_1, strlen(tbuf3));
-  char tbuf4[2] = {6,0};  //soil sensor 2 attached to s1, s3, bx1010101010, bx0101010101
-    nvm_write_block(tbuf4, (void *)ADDR_NVM_SSENSOR_2, strlen(tbuf4));
-  // end test data
-  
 #if defined(ARDUINO)  // only parse station special bits if it's supported
   if(os.status.has_sd) {
     server_change_stations_attrib(p, 'p', ADDR_NVM_STNSPE); // special
@@ -725,12 +712,6 @@ byte server_change_program(char *p) {
   pv+=3;
   // parse headers
   *(char*)(&prog) = parse_listdata(&pv);
-  
-  //testing purposes: /cp sets for program soil sensor attach flags: attached to soil_1 (the rest is for test
-	*((char*)(&prog)+1) = 3;  // sets both attached to the edited program
-//	*((char*)(&prog)+1) = 1;  // sets soil_1 attached to the edited program
-//	*((char*)(&prog)+1) = 0;  // sets no attached to the edited program
-			
   prog.days[0]= parse_listdata(&pv);
   prog.days[1]= parse_listdata(&pv);
   // parse start times
@@ -832,9 +813,8 @@ void server_json_programs_main() {
       pd.drem_to_relative(prog.days);
     }
 
-    byte flag_0 = *(char*)(&prog);		//read program structure binary attributes (called flag) value
-//	byte soil_flags = *((char*)(&prog)+1); //read soil sensor flag value
-    bfill.emit_p(PSTR("[$D,$D,$D,["), flag_0, prog.days[0], prog.days[1]);  //PSTR("[$D,$D,$D,$D,["), flag_0, soil_flags, prog.days[0], prog.days[1]
+    byte bytedata = *(char*)(&prog);
+    bfill.emit_p(PSTR("[$D,$D,$D,["), bytedata, prog.days[0], prog.days[1]);
     // start times data
     for (i=0;i<(MAX_NUM_STARTTIMES-1);i++) {
       bfill.emit_p(PSTR("$D,"), prog.starttimes[i]);
@@ -909,8 +889,8 @@ void server_json_controller_main() {
     bfill.emit_p(PSTR("\"curr\":$D,"), os.read_current());
   }
 #endif
-  if(os.options[OPTION_FSENSOR_TYPE]==SENSOR_TYPE_FLOW) {
-    bfill.emit_p(PSTR("\"flcrt\":$L,\"flwrt\":$D,"), sensors.window_impulses, FLOWCOUNT_RT_WINDOW);
+  if(os.options[OPTION_SENSOR_TYPE]==SENSOR_TYPE_FLOW) {
+    bfill.emit_p(PSTR("\"flcrt\":$L,\"flwrt\":$D,"), os.flowcount_rt, FLOWCOUNT_RT_WINDOW);
   }
 
   bfill.emit_p(PSTR("\"sbits\":["));
@@ -1420,13 +1400,8 @@ byte server_json_log(char *p) {
       tmp_buffer[TMP_BUFFER_SIZE-1]=0; // make sure the search will end
       while(*ptype && *ptype != ',') ptype++;
       if(*ptype != ',') continue; // didn't find comma, move on
-	  
-	  //do not send new log records, only classic logs, it needs UI development
-    //if first field of the log is 0, and second is not "rn" or "rs" then do not send
-		if(strncmp("[0", ptype-2, 2) && !(strncmp("rn", ptype+2, 2) || strncmp("rs", ptype+2, 2)))
-         continue;
-		 
-     ptype++;  // move past comma
+      ptype++;  // move past comma
+
       if (type_specified && strncmp(type, ptype+1, 2))
         continue;
       // if type is not specified, output everything except "wl" and "fl" records
